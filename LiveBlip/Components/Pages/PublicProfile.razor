@page "/publicprofile"
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@using LiveBlip.Models

<EditForm Model="@user" OnValidSubmit="SaveProfile"  FormName="ProfileForm">
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Username"
						HelperText="Max. 8 characters"
							@bind-Value="user.Username"
							For="@(() => user.Username)"
							Immediate="true"/>

                        <MudTextField Label="Email" Class="mt-3"
							@bind-Value="user.Email"
							For="@(() => user.Email)"
							InputType="InputType.Email"
							Immediate="true"/>

						<MudTextField Label="Password"
						HelperText="Choose a strong password" Class="mt-3"
							@bind-Value="user.Password"
							For="@(() => user.Password)"
							Adornment="Adornment.End"
							AdornmentIcon="@passwordAdornmentIcon"
							OnAdornmentClick="TogglePasswordVisibility"
							AdornmentAriaLabel="Show Password"
							InputType="@passwordInputType" T="string"
							Immediate="true"/>

                        <MudTextField Label="Confirm Password"
						HelperText="Repeat the password" Class="mt-3"
                            @bind-Value="user.Password2"
                            For="@(() => user.Password2)"
							Adornment="Adornment.End"
							AdornmentIcon="@confirmPasswordAdornmentIcon"
							OnAdornmentClick="ToggleConfirmPasswordVisibility"
							AdornmentAriaLabel="Show Password"
                            InputType="@confirmPasswordInputType" T="string"
							Immediate="true"/>

                        <MudTextField Label="First Name" Class="mt-3"
                            @bind-Value="user.FirstName"
                            For="@(() => user.FirstName)"
							Immediate="true"/>

                        <MudTextField Label="Last Name" Class="mt-3"
                            @bind-Value="user.LastName"
                            For="@(() => user.LastName)"
							Immediate="true"/>

						<MudTextField Label="Location" Class="mt-3"
                            @bind-Value="user.Location"
                            For="@(() => user.Location)"
							Immediate="true"/>

                    </MudCardContent>

					<MudCardActions>
						<MudGrid Justify="Justify.Center">
                			<MudItem>
                    			<MudButton ButtonType="ButtonType.Submit"
                        		Variant="Variant.Filled"
                        		Color="Color.Primary"
                        		Class="ml-auto">
								Save Profile
                    			</MudButton>
                			</MudItem>
            			</MudGrid>
					</MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>

@code {

 	private InputType passwordInputType = InputType.Password;
    private string passwordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
    private InputType confirmPasswordInputType = InputType.Password;
    private string confirmPasswordAdornmentIcon = Icons.Material.Filled.VisibilityOff;

    private UserModel user = new UserModel
    {
        Username = "testuser",
        Email = "test.user@example.com",
		Password = "Password",
		Password2 = "Password",
        FirstName = "test",
        LastName = "user",
        Location = "Johannesburg, South Africa"
    };

	  private async Task SaveProfile(EditContext context)
    {
		bool success=true;
        if(success!=true) {
            Snackbar.Add("User profile updated successfully.", Severity.Info);
            StateHasChanged();
        }
        else {
            Snackbar.Add("Error updating user profile. The database is not connected.", Severity.Error);
        }

    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == InputType.Password)
        {
            passwordInputType = InputType.Text;
            passwordAdornmentIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            passwordInputType = InputType.Password;
            passwordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private void ToggleConfirmPasswordVisibility()
    {
        if (confirmPasswordInputType == InputType.Password)
        {
            confirmPasswordInputType = InputType.Text;
            confirmPasswordAdornmentIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            confirmPasswordInputType = InputType.Password;
            confirmPasswordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
        }
    }
}
