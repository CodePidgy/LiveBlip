@page "/signin"
@using LiveBlip.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Sign In</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-12 d-flex flex-column justify-center align-center">
	<EditForm Model="@signInModel" OnValidSubmit="HandleValidSubmit" FormName="signinForm">
		<DataAnnotationsValidator />
		<MudGrid Class="justify-center align-center" Style="width: 100%; margin: 0 auto; ">
			<MudItem xs="12" sm="25">
				<MudCard Elevation="0" Class="pa-8 rounded-xl">

					<MudText Align="Align.Center" Color="Color.Secondary" Typo="Typo.h3" Class="mb-4">
						Sign In
					</MudText>

					<MudCardContent>
						<MudTextField
							@bind-Value="signInModel.Username"
							For="@(() => signInModel.Username)"
							Immediate="true"
							Label="Username"
							Class="mt-3 "
							Variant="Variant.Outlined"

						/>

						<MudTextField
							T="string"
							@bind-Value="signInModel.Password"
							For="@(() => signInModel.Password)"
							Adornment="Adornment.End"
							AdornmentIcon="@passwordAdornmentIcon"
							HelperText="Choose a strong password"
							Immediate="true"
							InputType="@passwordInputType"
							Label="Password"
							AdornmentAriaLabel="Show Password"
							Variant="Variant.Outlined"
							Class="mt-3"
							OnAdornmentClick="TogglePasswordVisibility"
						/>
					</MudCardContent>

					<MudCardActions>
						<MudGrid Justify="Justify.Center">
							<MudItem>
								<MudButton
									ButtonType="ButtonType.Submit"
									Color="Color.Primary"
									Variant="Variant.Filled"
									Class="ml-auto"
									Style="width: 150px;"
								>
									Login
								</MudButton>
							</MudItem>
						</MudGrid>
					</MudCardActions>

					<MudContainer MaxWidth="MaxWidth.Small" Style="text-align: center;">
						<MudText>Don't have an account?</MudText> <MudLink Href="/signup">Sign Up</MudLink>
					</MudContainer>

				</MudCard>
			</MudItem>
		</MudGrid>
	</EditForm>
</MudContainer>

@code {
	// fields ----------------------------------------------------------------------------------- //
	[SupplyParameterFromForm]
    private SignInModel signInModel { get; set; } = new();
	private InputType passwordInputType = InputType.Password;
    private string passwordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
	// methods ---------------------------------------------------------------------------------- //
    private async Task HandleValidSubmit() {
		// Hardcoded credentials
		const string hardcodeUname = "testuser";
		const string hardcodePword = "password";


        // Simulate sign-in logic for now
        if (signInModel.Username == hardcodeUname && signInModel.Password == hardcodePword) {
            // Navigate to the home page or a dashboard
			this.Snackbar.Clear();
			this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
			this.Snackbar.Configuration.VisibleStateDuration = 2;
			Snackbar.Add(
				"Login Successful.",
				Severity.Success
			);
            Navigation.NavigateTo("/");
        } else {
            // Display an error message
            this.Snackbar.Clear();
			this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
			this.Snackbar.Configuration.VisibleStateDuration = 2000;

			Snackbar.Add(
				"Invalid Username or Password.",
				Severity.Error,
				(options) => {
					options.CloseAfterNavigation = true;
				}
			);
        }
    }

	private void TogglePasswordVisibility() {
        if (passwordInputType == InputType.Password) {
            passwordInputType = InputType.Text;
            passwordAdornmentIcon = Icons.Material.Filled.Visibility;
        }
        else {
            passwordInputType = InputType.Password;
            passwordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
        }
    }
}
