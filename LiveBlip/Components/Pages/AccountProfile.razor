@using System.ComponentModel.DataAnnotations
@using LiveBlip.Models
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<EditForm FormName="ProfileForm" Model="@user" OnValidSubmit="SaveProfile">
	<DataAnnotationsValidator/>

	<MudGrid>
		<MudItem sm="12" xs="12">
			<MudCard Elevation="0">
				<MudCardContent>
					<MudTextField
						@bind-Value="user.Username"
						For="@(() => user.Username)"
						HelperText="Max. 8 characters"
						Immediate="true"
						Label="Username"
						Variant="Variant.Outlined"
						Class="mt-3"
					/>

					<MudTextField
						@bind-Value="user.Email"
						For="@(() => user.Email)"
						Disabled="true"
						Immediate="true"
						InputType="InputType.Email"
						Label="Email"
						Variant="Variant.Outlined"
						Class="mt-3"
					/>

					<MudTextField
						T="string"
						@bind-Value="user.Password"
						For="@(() => user.Password)"
						Adornment="Adornment.End"
						AdornmentIcon="@passwordAdornmentIcon"
						HelperText="Choose a strong password"
						Immediate="true"
						InputType="@passwordInputType"
						Label="Password"
						AdornmentAriaLabel="Show Password"
						Variant="Variant.Outlined"
						Class="mt-3"
						OnAdornmentClick="TogglePasswordVisibility"
					/>

					<MudTextField
						T="string"
						@bind-Value="user.ConfirmPassword"
						For="@(() => user.ConfirmPassword)"
						Adornment="Adornment.End"
						AdornmentIcon="@confirmPasswordAdornmentIcon"
						HelperText="Repeat the password"
						Class="mt-3"
						Immediate="true"
						InputType="@confirmPasswordInputType"
						Label="Confirm Password"
						AdornmentAriaLabel="Show Password"
						Variant="Variant.Outlined"
						OnAdornmentClick="ToggleConfirmPasswordVisibility"
					/>

					<MudTextField
						@bind-Value="user.FirstName"
						For="@(() => user.FirstName)"
						Immediate="true"
						Label="First Name"
						Variant="Variant.Outlined"
						Class="mt-3"
					/>

					<MudTextField
						@bind-Value="user.LastName"
						For="@(() => user.LastName)"
						Immediate="true"
						Label="Last Name"
						Variant="Variant.Outlined"
						Class="mt-3"
					/>

					<MudTextField
						@bind-Value="user.Location"
						For="@(() => user.Location)"
						Immediate="true"
						Label="Location"
						Variant="Variant.Outlined"
						Class="mt-3"
					/>
				</MudCardContent>

				<MudCardActions>
					<MudGrid Justify="Justify.Center">
						<MudItem>
							<MudButton
								ButtonType="ButtonType.Submit"
								Color="Color.Primary"
								Variant="Variant.Filled"
								Class="ml-auto"
							>
								Save Profile
							</MudButton>
						</MudItem>
					</MudGrid>
				</MudCardActions>
			</MudCard>
		</MudItem>
	</MudGrid>
</EditForm>

@code {
	// fields ----------------------------------------------------------------------------------- //
 	private InputType passwordInputType = InputType.Password;
    private string passwordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
    private InputType confirmPasswordInputType = InputType.Password;
    private string confirmPasswordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
    private UserModel user = new UserModel {
        Username = "testuser",
        Email = "test.user@example.com",
		Password = "Password",
		ConfirmPassword = "Password",
        FirstName = "test",
        LastName = "user",
        Location = "Johannesburg, South Africa"
    };

	// methods ---------------------------------------------------------------------------------- //
	private void SaveProfile(EditContext context) {
		bool success = true;

		if(!success) {
			Snackbar.Add("User profile updated successfully.", Severity.Info);

			StateHasChanged();
		} else {
			this.Snackbar.Clear();
			this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
			this.Snackbar.Configuration.VisibleStateDuration = 2000;

			Snackbar.Add(
				"Database not connected. This feature is in development.",
				Severity.Error,
				(options) => {
					options.CloseAfterNavigation = true;
				}
			);
		}
    }

	private void ToggleConfirmPasswordVisibility() {
        if (confirmPasswordInputType == InputType.Password) {
            confirmPasswordInputType = InputType.Text;
            confirmPasswordAdornmentIcon = Icons.Material.Filled.Visibility;
        }
        else {
            confirmPasswordInputType = InputType.Password;
            confirmPasswordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private void TogglePasswordVisibility() {
        if (passwordInputType == InputType.Password) {
            passwordInputType = InputType.Text;
            passwordAdornmentIcon = Icons.Material.Filled.Visibility;
        }
        else {
            passwordInputType = InputType.Password;
            passwordAdornmentIcon = Icons.Material.Filled.VisibilityOff;
        }
    }
}
